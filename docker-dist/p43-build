#!/bin/bash
################################################
#
# Project 43 Docker Build script
#
# Docker configuration file is in p43/Dockerfile
#
################################################

unset NOCACHE
unset SSHARG
BRANCH=master
HOSTNAME=example.com

while getopts ":nkb:h:" o; do
    case ${o} in
        n)
            NOCACHE="--no-cache"
            ;;
        k)
            SSHARG=1
            ;;
        b)
            BRANCH="$OPTARG"
            ;;
        h)
            HOSTNAME="$OPTARG"
            ;;
        '?')
            echo "Usage: $0 [-n] [-k] [-b branch] [-h server_hostname]"
            echo "      -n: no-cache (disable cached image for this build)"
            echo "      -k: use keypair (clone from private repository)"
            echo "      -K: no-keypair (clone from public repository) [default]"
            echo "      -b: branch from repo to use for build [default=master]"
            echo "      -h: hostname of this server for nginx configuration [default=example.com]"
            exit 1
            ;;
    esac
done

BRANCHARG="--build-arg branch=$BRANCH"

if [ "$NOCACHE" ]; then
    echo Building image without cache.
else
    echo Building image with cache.
fi

if [ "$SSHARG" ]; then
    echo Using private key for repo clone.
    DIR=key-based-build/
else
    echo "Assuming clone from public repository (not using a GitHub keypair)"
    DIR=public-build/
fi

# copy support files (nginx config and init script) to proper build dir - maintain in only one place
/bin/cp -f support_files/* $DIR
echo "$HOSTNAME" > $DIR/server-hostname

# fix up hostname in nginx configuration file
sed -i "" -e 's/${SERVER_HOSTNAME}/'"`cat ${DIR}/server-hostname`"'/' ${DIR}/nginx.conf

#echo docker build -t p43 ${NOCACHE} ${SSHARG} ${DIR}

if [ "$SSHARG" ]; then
    docker build -t p43 ${NOCACHE} $BRANCHARG --build-arg ssh_prv_key="$(cat ~/.ssh/id_ed25519_docker_github)" --build-arg ssh_pub_key="$(cat ~/.ssh/id_ed25519_docker_github.pub)" ${DIR}
else
    docker build -t p43 ${NOCACHE} $BRANCHARG ${DIR}
fi
